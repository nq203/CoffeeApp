import { db, auth, collection, doc, setDoc, getDoc, updateDoc } from "../firebaseConfig";
import { User } from "@/app/Types/types";
import { arrayUnion, arrayRemove } from "firebase/firestore";
import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from "firebase/auth";
import { uploadImageFromUri } from "./storageService";

const userCollection = collection(db, "users");

// üü¢ **T·∫°o ng∆∞·ªùi d√πng m·ªõi**
export const registerUser = async (email: string, password: string) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    const newUser: User = {
      id: user.uid,
      username: email.split("@")[0],
      password: password,
      email: email,
      favorites: [],
      favorite_cafes: [],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      name: email.split("@")[0],
      photoURL: ""
    };

    await setDoc(doc(userCollection, user.uid), newUser);
    return newUser;
  } catch (error) {
    console.error("L·ªói ƒëƒÉng k√Ω:", error);
    throw error;
  }
};

// üü¢ **ƒêƒÉng nh·∫≠p t√†i kho·∫£n**
export const loginUser = async (email: string, password: string) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return userCredential.user;
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    return error;
    throw error;
    
  }
};

// üü¢ **L·∫•y th√¥ng tin ng∆∞·ªùi d√πng**
export const getUser = async (userId: string) => {
  try {
    const userRef = doc(userCollection, userId);
    const userSnap = await getDoc(userRef);
    if (userSnap.exists()) {
      return userSnap.data() as User;
    } else {
      console.log("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
      return null;
    }
  } catch (error) {
    console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    throw error;
  }
};
// üü¢ **C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng**
export const updateUser = async (
  userId: string,
  updatedData: Partial<Omit<User, "id" | "created_at">> // Exclude `id` and `created_at` from updatable fields
) => {
  try {
    const userRef = doc(userCollection, userId);
    const userSnap = await getDoc(userRef);

    if (!userSnap.exists()) {
      throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
    }
    if(updatedData.photoURL){
      // storge image to storage
      // console.log("LOG :",updatedData.photoURL);
      const ImageURL = await uploadImageFromUri(updatedData.photoURL,'avatar-user');
      console.log(ImageURL);
      updatedData.photoURL = ImageURL;
    }
    // Prepare the updated data with a new `updated_at` timestamp
    const dataToUpdate = {
      ...updatedData,
      updated_at: new Date().toISOString(),
    };

    await updateDoc(userRef, dataToUpdate);
    console.log("C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!");
    return { success: true, data: dataToUpdate };
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
    throw error;
  }
};

// üü¢ **Th√™m / X√≥a qu√°n cafe kh·ªèi danh s√°ch y√™u th√≠ch**
export const toggleFavoriteCafe = async (userId: string, coffeeShopId: string) => {
  try {
    const userRef = doc(userCollection, userId);
    const userSnap = await getDoc(userRef);

    if (userSnap.exists()) {
      const userData = userSnap.data() as User;
      const isFavorite = userData.favorite_cafes.includes(coffeeShopId);

      await updateDoc(userRef, {
        favorite_cafes: isFavorite ? arrayRemove(coffeeShopId) : arrayUnion(coffeeShopId),
        updated_at: new Date().toISOString(), // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠a ƒë·ªïi
      });

      return !isFavorite; // Tr·∫£ v·ªÅ tr·∫°ng th√°i m·ªõi
    }
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t danh s√°ch y√™u th√≠ch:", error);
    throw error;
  }
};
export const getFavoriteCafes = async (userId: string): Promise<string[]> => {
  const userRef = doc(db, "users", userId);
  const userDoc = await getDoc(userRef);
  if (!userDoc.exists()) return [];
  return userDoc.data().favorite_cafes || [];
};
